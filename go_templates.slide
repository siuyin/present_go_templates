Using templates in Go
3 Nov 2016

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Templates with string and struct data
: Main Point -- how to ignore whitespace.
: Secondary the template variable must be uppercase because struct public starts Uppercase.
Use with a string (tstring.go):
.play -edit string/tstring.go /STR_S/,/STR_E/

Use with a struct (tstruct.go):
.play -numbers -edit struct/tstruct.go /STR_S/,/STR_E/
Line 12: Try (re)moving the '-'.
Line 16: How will templates handle non-string values? Press *run* to find out.

* Templates with map data
: Maps don't need upper-casing
: Map of string to interface{}!
Use with a map (tmap.go):
.play -edit -numbers map/tmap.go /MP_S/,/MP_E/
Line 10: Try replacing .salut with .Salut .

Line 13: We have a very flexible map indeed.
Try replacing the int *3* with:
1. [2]int{1,2}

2. 2 + 3

3. func(i float32) float32 { return i*2 }(2.3)

* Templates with functions passed in
: printf and other functions in templates FuncMap does not need the call command. I will show you how to define your own template functions later.
tfunc.go:
.play -edit -numbers func/tfunc.go /F_S/,/F_E/
Line 11: built in template printf call with 3 arguments.
Line 13: call to .time with zero arguments.
Line 14: call to .toffset with one argument.
Line 20: Try changing offset in the incoming data to another value.


* Conditional templating
: "", and nil evaluate to false
tif.go:
.play -edit -numbers if/tif.go /IF_S/,/IF_E/
Try replacing the struct with nil .

* Template iterations and variables
trange.go:
.play -edit -numbers range/trange.go /R_S/,/R_E/
Line 10: *len* is a template built-in function.

Line 11: *range* can _optionally_ assign variables. As seen in Line 12, $val is available as {{ . }} .

Line 17: What do you think will be displayed for the '' entry? -- no data -- ?

* Template ranging over channel
trch.go:
.code -numbers chan/trch.go /R_S/,/R_E/
.play -edit -numbers -edit chan/trch.go /S_S/,/S_E/
Line 17: Comment out the close, then *run*. What do you think will happen?

: I don't quite know how to use this properly.

* Composing Templates
: Main point -- template definition and template execution.
template A followed by template B (tcafb.go):
.play -edit -numbers comp/ab/tcab.go /tS/,/tE/
Line 14: Templates "a" and "b" have access to the data (aStuff and bStuff) passed in in Line 16.

* Composing Templates (2)
A enclosing B (tcaeb.go):
.play -edit -numbers comp/aeb/tcaeb.go /tS/,/tE/
Line 15: Template A is called with all of the data (".").

Lines 11 and 13: Templates A and B are defined respectively.
A's definition can reference aVal and bStuff because A was called with ".".
B's definition can access bVal because it was passed bStuff from A's definition.

Try changing the ".bVal" in the B template call on Line 13 to ".".

* Composing Templates (3) -- layouts
: layouts need FuncMap help.
: May be possible to use call syntax.
Say you have a form letter:

.code layout/main.go /layS/,/layE/

*Funcs* associates FuncMap ( *map[string]interface{}* ) with the template.
If you *Execute* this template you will just get "I am a layout." for the body.
Not good...

* Good and Bad News templates
We want to subtitute {{ body }} with the outputs of other templates like:

.code layout/main.go /tS/,/tE/

The output can be captured into a buffer thus:

.code layout/main.go /eTS/,/eTE/

Let's define a _render_ function.

* render function

.code -numbers layout/main.go /rnS/,/rnE/

Lines 17-19: Note we are replacing the FuncMap for _layout_ with a new one that contains the buffer.

Line 22: Execute the _layout_ and send the output to the io.Writer.

.play -edit layout/main.go /mnS/,/mnE/
: Change "gn" to "bn"
: more on Execute and Execute template next two slides.

* Defining templates from the filesystem
tplA.tpl:
.code fs/tplA.tpl

tplB.tpl:
.code fs/tplB.tpl

Note the define statements -- these name the templates.
They would otherwise be named "tplA.tpl" and "tplB.tpl" .

* Template A followed by B
: Main point - difference between Execute and ExecuteTemplate
tplAB.tpl:
.code fs/tplAB.tpl

.play -edit -numbers fs/tfs.go /FS_S/,/FS_E/
Line 14: Experiment with different template names and data values.

* HTML Templates

* HTML Layouts
html/tpl/layout.html:
.code -edit -numbers html/tpl/layout.html
Line 6: *yield* is a user-defined template function which will insert the partial below.

html/tpl/index/home.html:
.code -numbers html/tpl/index/home.html

* Parsing templates
htmlTpl.go:
.code -numbers htmlTpl.go /LAY_S/,/LAY_E/
Line 22: "index/home" and other templates under /html/tpl are parsed.

* Rendering index/home with the layout
htmlTpl.go:
.code -numbers htmlTpl.go /RDR_S/,/RDR_E/

* RenderTemplate call
htmlTpl.go:
.play -edit -numbers htmlTpl.go /CALL_S/,/CALL_E/
Line 52: try changing template name to index/homey -- this should throw an undefined template error.

Line 54: try inserting <script>alert('boom!')</script> for "myMainBody" to test script injection protection.

* Getting the slide presentation and code

.link https://github.com/siuyin/present_go_templates
